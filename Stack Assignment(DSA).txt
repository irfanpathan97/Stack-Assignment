A data structure that follows the Last-In-First-Out (LIFO) principle, meaning the last element added is the first one to be removed.  
Efficiently manage two stacks within a single array, ensuring optimal space utilization and avoiding overflows.
Provide a user-friendly interface with options to perform various operations on the stacks, such as pushing, popping, peeking, checking emptiness, and displaying elements.
Example
  Enter the capacity of the array: 5 
 Menu:
1. Push to Stack 1 
2. Pop from Stack 1 
3. Peek at Stack 1 
4. Check if Stack 1 is empty 
5. Push to Stack 2 
6. Pop from Stack 2 
7. Peek at Stack 2 
8. Check if Stack 2 is empty 
9. Exit

Enter your choice:



import java.util.Scanner;

class TwoStacks {
    private int[] arr;
    private int capacity;
    private int top1, top2;

    public TwoStacks(int size) {
        capacity = size;
        arr = new int[capacity];
        top1 = -1; 
        top2 = capacity; 
    }

   
    public void push1(int x) {
        if (top1 + 1 < top2) {
            arr[++top1] = x;
        } else {
            System.out.println("Stack Overflow in Stack 1");
        }
    }

    
    public void push2(int x) {
        if (top2 - 1 > top1) {
            arr[--top2] = x;
        } else {
            System.out.println("Stack Overflow in Stack 2");
        }
    }

    
    public int pop1() {
        if (top1 >= 0) {
            return arr[top1--];
        } else {
            System.out.println("Stack Underflow in Stack 1");
            return -1; 
        }
    }

        public int pop2() {
        if (top2 < capacity) {
            return arr[top2++];
        } else {
            System.out.println("Stack Underflow in Stack 2");
            return -1; 
        }
    }

        public int peek1() {
        if (top1 >= 0) {
            return arr[top1];
        } else {
            System.out.println("Stack is empty for Stack 1");
            return -1;         }
    }

       public int peek2() {
        if (top2 < capacity) {
            return arr[top2];
        } else {
            System.out.println("Stack is empty for Stack 2");
            return -1;         }
    }

        public boolean isEmpty1() {
        return top1 == -1;
    }

        public boolean isEmpty2() {
        return top2 == capacity;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the capacity of the array: ");
        int capacity = scanner.nextInt();
        TwoStacks stacks = new TwoStacks(capacity);

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Push to Stack 1");
            System.out.println("2. Pop from Stack 1");
            System.out.println("3. Peek at Stack 1");
            System.out.println("4. Check if Stack 1 is empty");
            System.out.println("5. Push to Stack 2");
            System.out.println("6. Pop from Stack 2");
            System.out.println("7. Peek at Stack 2");
            System.out.println("8. Check if Stack 2 is empty");
            System.out.println("9. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to push to Stack 1: ");
                    stacks.push1(scanner.nextInt());
                    break;
                case 2:
                    System.out.println("Popped from Stack 1: " + stacks.pop1());
                    break;
                case 3:
                    System.out.println("Peek at Stack 1: " + stacks.peek1());
                    break;
                case 4:
                    System.out.println("Is Stack 1 empty? " + stacks.isEmpty1());
                    break;
                case 5:
                    System.out.print("Enter value to push to Stack 2: ");
                    stacks.push2(scanner.nextInt());
                    break;
                case 6:
                    System.out.println("Popped from Stack 2: " + stacks.pop2());
                    break;
                case 7:
                    System.out.println("Peek at Stack 2: " + stacks.peek2());
                    break;
                case 8:
                    System.out.println("Is Stack 2 empty? " + stacks.isEmpty2());
                    break;
                case 9:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}
